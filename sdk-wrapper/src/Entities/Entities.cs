
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: Microsoft.Xrm.Sdk.Client.ProxyTypesAssemblyAttribute()]
[assembly: System.CodeDom.Compiler.GeneratedCodeAttribute("CrmSvcUtil", "9.1.0.71")]

namespace sdk_wrapper.Entities
{


  /// <summary>
  /// Assembly that contains one or more plug-in types.
  /// </summary>
  [System.Runtime.Serialization.DataContractAttribute()]
  [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("pluginassembly")]
  public partial class PluginAssembly : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
  {

    public static class Fields
    {
      public const string AuthType = "authtype";
      public const string ComponentState = "componentstate";
      public const string Content = "content";
      public const string CreatedBy = "createdby";
      public const string CreatedOn = "createdon";
      public const string CreatedOnBehalfBy = "createdonbehalfby";
      public const string Culture = "culture";
      public const string CustomizationLevel = "customizationlevel";
      public const string Description = "description";
      public const string IntroducedVersion = "introducedversion";
      public const string IsCustomizable = "iscustomizable";
      public const string IsHidden = "ishidden";
      public const string IsManaged = "ismanaged";
      public const string IsolationMode = "isolationmode";
      public const string IsPasswordSet = "ispasswordset";
      public const string Major = "major";
      public const string ManagedIdentityId = "managedidentityid";
      public const string Minor = "minor";
      public const string ModifiedBy = "modifiedby";
      public const string ModifiedOn = "modifiedon";
      public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
      public const string Name = "name";
      public const string OrganizationId = "organizationid";
      public const string OverwriteTime = "overwritetime";
      public const string Password = "password";
      public const string Path = "path";
      public const string PluginAssemblyId = "pluginassemblyid";
      public const string Id = "pluginassemblyid";
      public const string PluginAssemblyIdUnique = "pluginassemblyidunique";
      public const string PublicKeyToken = "publickeytoken";
      public const string SolutionId = "solutionid";
      public const string SourceHash = "sourcehash";
      public const string SourceType = "sourcetype";
      public const string Url = "url";
      public const string UserName = "username";
      public const string Version = "version";
      public const string VersionNumber = "versionnumber";
    }

    /// <summary>
    /// Default Constructor.
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCode()]
    public PluginAssembly() :
        base(EntityLogicalName)
    {
    }

    public const string EntityLogicalName = "pluginassembly";

    public const string EntitySchemaName = "PluginAssembly";

    public const string PrimaryIdAttribute = "pluginassemblyid";

    public const string PrimaryNameAttribute = "name";

    public const string EntityLogicalCollectionName = "pluginassemblies";

    public const string EntitySetName = "pluginassemblies";

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;

    [System.Diagnostics.DebuggerNonUserCode()]
    private void OnPropertyChanged(string propertyName)
    {
      if ((this.PropertyChanged != null))
      {
        this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
      }
    }

    [System.Diagnostics.DebuggerNonUserCode()]
    private void OnPropertyChanging(string propertyName)
    {
      if ((this.PropertyChanging != null))
      {
        this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
      }
    }

    /// <summary>
    /// Specifies mode of authentication with web sources like WebApp
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("authtype")]
    public Microsoft.Xrm.Sdk.OptionSetValue AuthType
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("authtype");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("AuthType");
        this.SetAttributeValue("authtype", value);
        this.OnPropertyChanged("AuthType");
      }
    }

    /// <summary>
    /// Specifies mode of authentication with web sources like WebApp
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("authtype")]
    public virtual PluginAssembly_AuthType? AuthTypeEnum
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return ((PluginAssembly_AuthType?)(EntityOptionSetEnum.GetEnum(this, "authtype")));
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("AuthType");
        this.SetAttributeValue("authtype", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
        this.OnPropertyChanged("AuthType");
      }
    }

    /// <summary>
    /// For internal use only.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componentstate")]
    public Microsoft.Xrm.Sdk.OptionSetValue ComponentState
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("componentstate");
      }
    }

    /// <summary>
    /// For internal use only.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componentstate")]
    public virtual ComponentState? ComponentStateEnum
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return ((ComponentState?)(EntityOptionSetEnum.GetEnum(this, "componentstate")));
      }
    }

    /// <summary>
    /// Bytes of the assembly, in Base64 format.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("content")]
    public string Content
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("content");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("Content");
        this.SetAttributeValue("content", value);
        this.OnPropertyChanged("Content");
      }
    }

    /// <summary>
    /// Unique identifier of the user who created the plug-in assembly.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
    public Microsoft.Xrm.Sdk.EntityReference CreatedBy
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdby");
      }
    }

    /// <summary>
    /// Date and time when the plug-in assembly was created.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdon")]
    public System.Nullable<System.DateTime> CreatedOn
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.DateTime>>("createdon");
      }
    }

    /// <summary>
    /// Unique identifier of the delegate user who created the pluginassembly.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
    public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdonbehalfby");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("CreatedOnBehalfBy");
        this.SetAttributeValue("createdonbehalfby", value);
        this.OnPropertyChanged("CreatedOnBehalfBy");
      }
    }

    /// <summary>
    /// Culture code for the plug-in assembly.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("culture")]
    public string Culture
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("culture");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("Culture");
        this.SetAttributeValue("culture", value);
        this.OnPropertyChanged("Culture");
      }
    }

    /// <summary>
    /// Customization Level.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("customizationlevel")]
    public System.Nullable<int> CustomizationLevel
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<int>>("customizationlevel");
      }
    }

    /// <summary>
    /// Description of the plug-in assembly.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("description")]
    public string Description
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("description");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("Description");
        this.SetAttributeValue("description", value);
        this.OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// Version in which the form is introduced.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("introducedversion")]
    public string IntroducedVersion
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("introducedversion");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("IntroducedVersion");
        this.SetAttributeValue("introducedversion", value);
        this.OnPropertyChanged("IntroducedVersion");
      }
    }

    /// <summary>
    /// Information that specifies whether this component can be customized.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("iscustomizable")]
    public Microsoft.Xrm.Sdk.BooleanManagedProperty IsCustomizable
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.BooleanManagedProperty>("iscustomizable");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("IsCustomizable");
        this.SetAttributeValue("iscustomizable", value);
        this.OnPropertyChanged("IsCustomizable");
      }
    }

    /// <summary>
    /// Information that specifies whether this component should be hidden.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ishidden")]
    public Microsoft.Xrm.Sdk.BooleanManagedProperty IsHidden
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.BooleanManagedProperty>("ishidden");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("IsHidden");
        this.SetAttributeValue("ishidden", value);
        this.OnPropertyChanged("IsHidden");
      }
    }

    /// <summary>
    /// Information that specifies whether this component is managed.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismanaged")]
    public System.Nullable<bool> IsManaged
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<bool>>("ismanaged");
      }
    }

    /// <summary>
    /// Information about how the plugin assembly is to be isolated at execution time; None / Sandboxed.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isolationmode")]
    public Microsoft.Xrm.Sdk.OptionSetValue IsolationMode
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("isolationmode");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("IsolationMode");
        this.SetAttributeValue("isolationmode", value);
        this.OnPropertyChanged("IsolationMode");
      }
    }

    /// <summary>
    /// Information about how the plugin assembly is to be isolated at execution time; None / Sandboxed.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isolationmode")]
    public virtual PluginAssembly_IsolationMode? IsolationModeEnum
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return ((PluginAssembly_IsolationMode?)(EntityOptionSetEnum.GetEnum(this, "isolationmode")));
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("IsolationMode");
        this.SetAttributeValue("isolationmode", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
        this.OnPropertyChanged("IsolationMode");
      }
    }

    /// <summary>
    /// 
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ispasswordset")]
    public System.Nullable<bool> IsPasswordSet
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<bool>>("ispasswordset");
      }
    }

    /// <summary>
    /// Major of the assembly version.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("major")]
    public System.Nullable<int> Major
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<int>>("major");
      }
    }

    /// <summary>
    /// Unique identifier for managedidentity associated with pluginassembly.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("managedidentityid")]
    public Microsoft.Xrm.Sdk.EntityReference ManagedIdentityId
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("managedidentityid");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("ManagedIdentityId");
        this.SetAttributeValue("managedidentityid", value);
        this.OnPropertyChanged("ManagedIdentityId");
      }
    }

    /// <summary>
    /// Minor of the assembly version.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("minor")]
    public System.Nullable<int> Minor
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<int>>("minor");
      }
    }

    /// <summary>
    /// Unique identifier of the user who last modified the plug-in assembly.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
    public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedby");
      }
    }

    /// <summary>
    /// Date and time when the plug-in assembly was last modified.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedon")]
    public System.Nullable<System.DateTime> ModifiedOn
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.DateTime>>("modifiedon");
      }
    }

    /// <summary>
    /// Unique identifier of the delegate user who last modified the pluginassembly.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
    public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedonbehalfby");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("ModifiedOnBehalfBy");
        this.SetAttributeValue("modifiedonbehalfby", value);
        this.OnPropertyChanged("ModifiedOnBehalfBy");
      }
    }

    /// <summary>
    /// Name of the plug-in assembly.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("name")]
    public string Name
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("name");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("Name");
        this.SetAttributeValue("name", value);
        this.OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Unique identifier of the organization with which the plug-in assembly is associated.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
    public Microsoft.Xrm.Sdk.EntityReference OrganizationId
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("organizationid");
      }
    }

    /// <summary>
    /// For internal use only.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overwritetime")]
    public System.Nullable<System.DateTime> OverwriteTime
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.DateTime>>("overwritetime");
      }
    }

    /// <summary>
    /// User Password
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("password")]
    public string Password
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("password");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("Password");
        this.SetAttributeValue("password", value);
        this.OnPropertyChanged("Password");
      }
    }

    /// <summary>
    /// File name of the plug-in assembly. Used when the source type is set to 1.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("path")]
    public string Path
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("path");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("Path");
        this.SetAttributeValue("path", value);
        this.OnPropertyChanged("Path");
      }
    }

    /// <summary>
    /// Unique identifier of the plug-in assembly.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("pluginassemblyid")]
    public System.Nullable<System.Guid> PluginAssemblyId
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.Guid>>("pluginassemblyid");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("PluginAssemblyId");
        this.SetAttributeValue("pluginassemblyid", value);
        if (value.HasValue)
        {
          base.Id = value.Value;
        }
        else
        {
          base.Id = System.Guid.Empty;
        }
        this.OnPropertyChanged("PluginAssemblyId");
      }
    }

    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("pluginassemblyid")]
    public override System.Guid Id
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return base.Id;
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.PluginAssemblyId = value;
      }
    }

    /// <summary>
    /// Unique identifier of the plug-in assembly.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("pluginassemblyidunique")]
    public System.Nullable<System.Guid> PluginAssemblyIdUnique
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.Guid>>("pluginassemblyidunique");
      }
    }

    /// <summary>
    /// Public key token of the assembly. This value can be obtained from the assembly by using reflection.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("publickeytoken")]
    public string PublicKeyToken
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("publickeytoken");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("PublicKeyToken");
        this.SetAttributeValue("publickeytoken", value);
        this.OnPropertyChanged("PublicKeyToken");
      }
    }

    /// <summary>
    /// Unique identifier of the associated solution.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutionid")]
    public System.Nullable<System.Guid> SolutionId
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.Guid>>("solutionid");
      }
    }

    /// <summary>
    /// Hash of the source of the assembly.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("sourcehash")]
    public string SourceHash
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("sourcehash");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("SourceHash");
        this.SetAttributeValue("sourcehash", value);
        this.OnPropertyChanged("SourceHash");
      }
    }

    /// <summary>
    /// Location of the assembly, for example 0=database, 1=on-disk.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("sourcetype")]
    public Microsoft.Xrm.Sdk.OptionSetValue SourceType
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("sourcetype");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("SourceType");
        this.SetAttributeValue("sourcetype", value);
        this.OnPropertyChanged("SourceType");
      }
    }

    /// <summary>
    /// Location of the assembly, for example 0=database, 1=on-disk.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("sourcetype")]
    public virtual PluginAssembly_SourceType? SourceTypeEnum
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return ((PluginAssembly_SourceType?)(EntityOptionSetEnum.GetEnum(this, "sourcetype")));
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("SourceType");
        this.SetAttributeValue("sourcetype", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
        this.OnPropertyChanged("SourceType");
      }
    }

    /// <summary>
    /// Web Url
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("url")]
    public string Url
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("url");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("Url");
        this.SetAttributeValue("url", value);
        this.OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// User Name
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("username")]
    public string UserName
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("username");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("UserName");
        this.SetAttributeValue("username", value);
        this.OnPropertyChanged("UserName");
      }
    }

    /// <summary>
    /// Version number of the assembly. The value can be obtained from the assembly through reflection.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("version")]
    public string Version
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("version");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("Version");
        this.SetAttributeValue("version", value);
        this.OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// 
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
    public System.Nullable<long> VersionNumber
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
      }
    }

    /// <summary>
    /// 1:N pluginassembly_plugintype
    /// </summary>
    [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("pluginassembly_plugintype")]
    public System.Collections.Generic.IEnumerable<sdk_wrapper.Entities.PluginType> pluginassembly_plugintype
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetRelatedEntities<sdk_wrapper.Entities.PluginType>("pluginassembly_plugintype", null);
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("pluginassembly_plugintype");
        this.SetRelatedEntities<sdk_wrapper.Entities.PluginType>("pluginassembly_plugintype", null, value);
        this.OnPropertyChanged("pluginassembly_plugintype");
      }
    }

    /// <summary>
    /// Constructor for populating via LINQ queries given a LINQ anonymous type
    /// <param name="anonymousType">LINQ anonymous type.</param>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCode()]
    public PluginAssembly(object anonymousType) :
        this()
    {
      foreach (var p in anonymousType.GetType().GetProperties())
      {
        var value = p.GetValue(anonymousType, null);
        var name = p.Name.ToLower();

        if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
        {
          value = new Microsoft.Xrm.Sdk.OptionSetValue((int)value);
          name = name.Remove(name.Length - "enum".Length);
        }

        switch (name)
        {
          case "id":
            base.Id = (System.Guid)value;
            Attributes["pluginassemblyid"] = base.Id;
            break;
          case "pluginassemblyid":
            var id = (System.Nullable<System.Guid>)value;
            if (id == null) { continue; }
            base.Id = id.Value;
            Attributes[name] = base.Id;
            break;
          case "formattedvalues":
            // Add Support for FormattedValues
            FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
            break;
          default:
            Attributes[name] = value;
            break;
        }
      }
    }
  }

  /// <summary>
  /// Type that inherits from the IPlugin interface and is contained within a plug-in assembly.
  /// </summary>
  [System.Runtime.Serialization.DataContractAttribute()]
  [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("plugintype")]
  public partial class PluginType : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
  {

    public static class Fields
    {
      public const string AssemblyName = "assemblyname";
      public const string ComponentState = "componentstate";
      public const string CreatedBy = "createdby";
      public const string CreatedOn = "createdon";
      public const string CreatedOnBehalfBy = "createdonbehalfby";
      public const string Culture = "culture";
      public const string CustomizationLevel = "customizationlevel";
      public const string CustomWorkflowActivityInfo = "customworkflowactivityinfo";
      public const string Description = "description";
      public const string FriendlyName = "friendlyname";
      public const string IsManaged = "ismanaged";
      public const string IsWorkflowActivity = "isworkflowactivity";
      public const string Major = "major";
      public const string Minor = "minor";
      public const string ModifiedBy = "modifiedby";
      public const string ModifiedOn = "modifiedon";
      public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
      public const string Name = "name";
      public const string OrganizationId = "organizationid";
      public const string OverwriteTime = "overwritetime";
      public const string PluginAssemblyId = "pluginassemblyid";
      public const string PluginTypeId = "plugintypeid";
      public const string Id = "plugintypeid";
      public const string PluginTypeIdUnique = "plugintypeidunique";
      public const string PublicKeyToken = "publickeytoken";
      public const string SolutionId = "solutionid";
      public const string TypeName = "typename";
      public const string Version = "version";
      public const string VersionNumber = "versionnumber";
      public const string WorkflowActivityGroupName = "workflowactivitygroupname";
      public const string pluginassembly_plugintype = "pluginassembly_plugintype";
    }

    /// <summary>
    /// Default Constructor.
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCode()]
    public PluginType() :
        base(EntityLogicalName)
    {
    }

    public const string EntityLogicalName = "plugintype";

    public const string EntitySchemaName = "PluginType";

    public const string PrimaryIdAttribute = "plugintypeid";

    public const string PrimaryNameAttribute = "name";

    public const string EntityLogicalCollectionName = "plugintypes";

    public const string EntitySetName = "plugintypes";

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;

    [System.Diagnostics.DebuggerNonUserCode()]
    private void OnPropertyChanged(string propertyName)
    {
      if ((this.PropertyChanged != null))
      {
        this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
      }
    }

    [System.Diagnostics.DebuggerNonUserCode()]
    private void OnPropertyChanging(string propertyName)
    {
      if ((this.PropertyChanging != null))
      {
        this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
      }
    }

    /// <summary>
    /// Full path name of the plug-in assembly.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("assemblyname")]
    public string AssemblyName
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("assemblyname");
      }
    }

    /// <summary>
    /// For internal use only.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componentstate")]
    public Microsoft.Xrm.Sdk.OptionSetValue ComponentState
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("componentstate");
      }
    }

    /// <summary>
    /// For internal use only.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componentstate")]
    public virtual ComponentState? ComponentStateEnum
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return ((ComponentState?)(EntityOptionSetEnum.GetEnum(this, "componentstate")));
      }
    }

    /// <summary>
    /// Unique identifier of the user who created the plug-in type.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
    public Microsoft.Xrm.Sdk.EntityReference CreatedBy
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdby");
      }
    }

    /// <summary>
    /// Date and time when the plug-in type was created.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdon")]
    public System.Nullable<System.DateTime> CreatedOn
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.DateTime>>("createdon");
      }
    }

    /// <summary>
    /// Unique identifier of the delegate user who created the plugintype.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
    public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdonbehalfby");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("CreatedOnBehalfBy");
        this.SetAttributeValue("createdonbehalfby", value);
        this.OnPropertyChanged("CreatedOnBehalfBy");
      }
    }

    /// <summary>
    /// Culture code for the plug-in assembly.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("culture")]
    public string Culture
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("culture");
      }
    }

    /// <summary>
    /// Customization level of the plug-in type.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("customizationlevel")]
    public System.Nullable<int> CustomizationLevel
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<int>>("customizationlevel");
      }
    }

    /// <summary>
    /// Serialized Custom Activity Type information, including required arguments. For more information, see SandboxCustomActivityInfo.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("customworkflowactivityinfo")]
    public string CustomWorkflowActivityInfo
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("customworkflowactivityinfo");
      }
    }

    /// <summary>
    /// Description of the plug-in type.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("description")]
    public string Description
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("description");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("Description");
        this.SetAttributeValue("description", value);
        this.OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// User friendly name for the plug-in.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("friendlyname")]
    public string FriendlyName
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("friendlyname");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("FriendlyName");
        this.SetAttributeValue("friendlyname", value);
        this.OnPropertyChanged("FriendlyName");
      }
    }

    /// <summary>
    /// 
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismanaged")]
    public System.Nullable<bool> IsManaged
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<bool>>("ismanaged");
      }
    }

    /// <summary>
    /// Indicates if the plug-in is a custom activity for workflows.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isworkflowactivity")]
    public System.Nullable<bool> IsWorkflowActivity
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<bool>>("isworkflowactivity");
      }
    }

    /// <summary>
    /// Major of the version number of the assembly for the plug-in type.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("major")]
    public System.Nullable<int> Major
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<int>>("major");
      }
    }

    /// <summary>
    /// Minor of the version number of the assembly for the plug-in type.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("minor")]
    public System.Nullable<int> Minor
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<int>>("minor");
      }
    }

    /// <summary>
    /// Unique identifier of the user who last modified the plug-in type.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
    public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedby");
      }
    }

    /// <summary>
    /// Date and time when the plug-in type was last modified.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedon")]
    public System.Nullable<System.DateTime> ModifiedOn
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.DateTime>>("modifiedon");
      }
    }

    /// <summary>
    /// Unique identifier of the delegate user who last modified the plugintype.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
    public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedonbehalfby");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("ModifiedOnBehalfBy");
        this.SetAttributeValue("modifiedonbehalfby", value);
        this.OnPropertyChanged("ModifiedOnBehalfBy");
      }
    }

    /// <summary>
    /// Name of the plug-in type.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("name")]
    public string Name
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("name");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("Name");
        this.SetAttributeValue("name", value);
        this.OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Unique identifier of the organization with which the plug-in type is associated.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
    public Microsoft.Xrm.Sdk.EntityReference OrganizationId
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("organizationid");
      }
    }

    /// <summary>
    /// For internal use only.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overwritetime")]
    public System.Nullable<System.DateTime> OverwriteTime
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.DateTime>>("overwritetime");
      }
    }

    /// <summary>
    /// Unique identifier of the plug-in assembly that contains this plug-in type.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("pluginassemblyid")]
    public Microsoft.Xrm.Sdk.EntityReference PluginAssemblyId
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("pluginassemblyid");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("PluginAssemblyId");
        this.SetAttributeValue("pluginassemblyid", value);
        this.OnPropertyChanged("PluginAssemblyId");
      }
    }

    /// <summary>
    /// Unique identifier of the plug-in type.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("plugintypeid")]
    public System.Nullable<System.Guid> PluginTypeId
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.Guid>>("plugintypeid");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("PluginTypeId");
        this.SetAttributeValue("plugintypeid", value);
        if (value.HasValue)
        {
          base.Id = value.Value;
        }
        else
        {
          base.Id = System.Guid.Empty;
        }
        this.OnPropertyChanged("PluginTypeId");
      }
    }

    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("plugintypeid")]
    public override System.Guid Id
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return base.Id;
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.PluginTypeId = value;
      }
    }

    /// <summary>
    /// Unique identifier of the plug-in type.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("plugintypeidunique")]
    public System.Nullable<System.Guid> PluginTypeIdUnique
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.Guid>>("plugintypeidunique");
      }
    }

    /// <summary>
    /// Public key token of the assembly for the plug-in type.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("publickeytoken")]
    public string PublicKeyToken
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("publickeytoken");
      }
    }

    /// <summary>
    /// Unique identifier of the associated solution.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutionid")]
    public System.Nullable<System.Guid> SolutionId
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.Guid>>("solutionid");
      }
    }

    /// <summary>
    /// Fully qualified type name of the plug-in type.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("typename")]
    public string TypeName
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("typename");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("TypeName");
        this.SetAttributeValue("typename", value);
        this.OnPropertyChanged("TypeName");
      }
    }

    /// <summary>
    /// Version number of the assembly for the plug-in type.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("version")]
    public string Version
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("version");
      }
    }

    /// <summary>
    /// 
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
    public System.Nullable<long> VersionNumber
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
      }
    }

    /// <summary>
    /// Group name of workflow custom activity.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("workflowactivitygroupname")]
    public string WorkflowActivityGroupName
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<string>("workflowactivitygroupname");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("WorkflowActivityGroupName");
        this.SetAttributeValue("workflowactivitygroupname", value);
        this.OnPropertyChanged("WorkflowActivityGroupName");
      }
    }

    /// <summary>
    /// N:1 pluginassembly_plugintype
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("pluginassemblyid")]
    [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("pluginassembly_plugintype")]
    public sdk_wrapper.Entities.PluginAssembly pluginassembly_plugintype
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetRelatedEntity<sdk_wrapper.Entities.PluginAssembly>("pluginassembly_plugintype", null);
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("pluginassembly_plugintype");
        this.SetRelatedEntity<sdk_wrapper.Entities.PluginAssembly>("pluginassembly_plugintype", null, value);
        this.OnPropertyChanged("pluginassembly_plugintype");
      }
    }

    /// <summary>
    /// Constructor for populating via LINQ queries given a LINQ anonymous type
    /// <param name="anonymousType">LINQ anonymous type.</param>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCode()]
    public PluginType(object anonymousType) :
        this()
    {
      foreach (var p in anonymousType.GetType().GetProperties())
      {
        var value = p.GetValue(anonymousType, null);
        var name = p.Name.ToLower();

        if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
        {
          value = new Microsoft.Xrm.Sdk.OptionSetValue((int)value);
          name = name.Remove(name.Length - "enum".Length);
        }

        switch (name)
        {
          case "id":
            base.Id = (System.Guid)value;
            Attributes["plugintypeid"] = base.Id;
            break;
          case "plugintypeid":
            var id = (System.Nullable<System.Guid>)value;
            if (id == null) { continue; }
            base.Id = id.Value;
            Attributes[name] = base.Id;
            break;
          case "formattedvalues":
            // Add Support for FormattedValues
            FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
            break;
          default:
            Attributes[name] = value;
            break;
        }
      }
    }
  }

  /// <summary>
  /// A component of a CRM solution.
  /// </summary>
  [System.Runtime.Serialization.DataContractAttribute()]
  [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("solutioncomponent")]
  public partial class SolutionComponent : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
  {

    public static class Fields
    {
      public const string ComponentType = "componenttype";
      public const string CreatedBy = "createdby";
      public const string CreatedOn = "createdon";
      public const string CreatedOnBehalfBy = "createdonbehalfby";
      public const string IsMetadata = "ismetadata";
      public const string ModifiedBy = "modifiedby";
      public const string ModifiedOn = "modifiedon";
      public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
      public const string ObjectId = "objectid";
      public const string RootComponentBehavior = "rootcomponentbehavior";
      public const string RootSolutionComponentId = "rootsolutioncomponentid";
      public const string SolutionComponentId = "solutioncomponentid";
      public const string Id = "solutioncomponentid";
      public const string SolutionId = "solutionid";
      public const string VersionNumber = "versionnumber";
      public const string Referencingsolutioncomponent_parent_solutioncomponent = "solutioncomponent_parent_solutioncomponent";
    }

    /// <summary>
    /// Default Constructor.
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCode()]
    public SolutionComponent() :
        base(EntityLogicalName)
    {
    }

    public const string EntityLogicalName = "solutioncomponent";

    public const string EntitySchemaName = "SolutionComponent";

    public const string PrimaryIdAttribute = "solutioncomponentid";

    public const string EntityLogicalCollectionName = "solutioncomponentss";

    public const string EntitySetName = "solutioncomponents";

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;

    [System.Diagnostics.DebuggerNonUserCode()]
    private void OnPropertyChanged(string propertyName)
    {
      if ((this.PropertyChanged != null))
      {
        this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
      }
    }

    [System.Diagnostics.DebuggerNonUserCode()]
    private void OnPropertyChanging(string propertyName)
    {
      if ((this.PropertyChanging != null))
      {
        this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
      }
    }

    /// <summary>
    /// The object type code of the component.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componenttype")]
    public Microsoft.Xrm.Sdk.OptionSetValue ComponentType
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("componenttype");
      }
    }

    /// <summary>
    /// The object type code of the component.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componenttype")]
    public virtual ComponentType? ComponentTypeEnum
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return ((ComponentType?)(EntityOptionSetEnum.GetEnum(this, "componenttype")));
      }
    }

    /// <summary>
    /// Unique identifier of the user who created the solution
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
    public Microsoft.Xrm.Sdk.EntityReference CreatedBy
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdby");
      }
    }

    /// <summary>
    /// Date and time when the solution was created.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdon")]
    public System.Nullable<System.DateTime> CreatedOn
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.DateTime>>("createdon");
      }
    }

    /// <summary>
    /// Unique identifier of the delegate user who created the solution.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
    public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdonbehalfby");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("CreatedOnBehalfBy");
        this.SetAttributeValue("createdonbehalfby", value);
        this.OnPropertyChanged("CreatedOnBehalfBy");
      }
    }

    /// <summary>
    /// Indicates whether this component is metadata or data.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismetadata")]
    public System.Nullable<bool> IsMetadata
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<bool>>("ismetadata");
      }
    }

    /// <summary>
    /// Unique identifier of the user who last modified the solution.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
    public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedby");
      }
    }

    /// <summary>
    /// Date and time when the solution was last modified.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedon")]
    public System.Nullable<System.DateTime> ModifiedOn
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.DateTime>>("modifiedon");
      }
    }

    /// <summary>
    /// Unique identifier of the delegate user who modified the solution.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
    public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedonbehalfby");
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("ModifiedOnBehalfBy");
        this.SetAttributeValue("modifiedonbehalfby", value);
        this.OnPropertyChanged("ModifiedOnBehalfBy");
      }
    }

    /// <summary>
    /// Unique identifier of the object with which the component is associated.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("objectid")]
    public System.Nullable<System.Guid> ObjectId
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.Guid>>("objectid");
      }
    }

    /// <summary>
    /// Indicates the include behavior of the root component.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rootcomponentbehavior")]
    public Microsoft.Xrm.Sdk.OptionSetValue RootComponentBehavior
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("rootcomponentbehavior");
      }
    }

    /// <summary>
    /// Indicates the include behavior of the root component.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rootcomponentbehavior")]
    public virtual SolutionComponent_RootComponentBehavior? RootComponentBehaviorEnum
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return ((SolutionComponent_RootComponentBehavior?)(EntityOptionSetEnum.GetEnum(this, "rootcomponentbehavior")));
      }
    }

    /// <summary>
    /// The parent ID of the subcomponent, which will be a root
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rootsolutioncomponentid")]
    public System.Nullable<System.Guid> RootSolutionComponentId
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.Guid>>("rootsolutioncomponentid");
      }
    }

    /// <summary>
    /// Unique identifier of the solution component.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutioncomponentid")]
    public System.Nullable<System.Guid> SolutionComponentId
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<System.Guid>>("solutioncomponentid");
      }
    }

    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutioncomponentid")]
    public override System.Guid Id
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return base.Id;
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        base.Id = value;
      }
    }

    /// <summary>
    /// Unique identifier of the solution.
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutionid")]
    public Microsoft.Xrm.Sdk.EntityReference SolutionId
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("solutionid");
      }
    }

    /// <summary>
    /// 
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
    public System.Nullable<long> VersionNumber
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
      }
    }

    /// <summary>
    /// 1:N solutioncomponent_parent_solutioncomponent
    /// </summary>
    [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("solutioncomponent_parent_solutioncomponent", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
    public System.Collections.Generic.IEnumerable<sdk_wrapper.Entities.SolutionComponent> Referencedsolutioncomponent_parent_solutioncomponent
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetRelatedEntities<sdk_wrapper.Entities.SolutionComponent>("solutioncomponent_parent_solutioncomponent", Microsoft.Xrm.Sdk.EntityRole.Referenced);
      }
      [System.Diagnostics.DebuggerNonUserCode()]
      set
      {
        this.OnPropertyChanging("Referencedsolutioncomponent_parent_solutioncomponent");
        this.SetRelatedEntities<sdk_wrapper.Entities.SolutionComponent>("solutioncomponent_parent_solutioncomponent", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
        this.OnPropertyChanged("Referencedsolutioncomponent_parent_solutioncomponent");
      }
    }

    /// <summary>
    /// N:1 solutioncomponent_parent_solutioncomponent
    /// </summary>
    [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rootsolutioncomponentid")]
    [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("solutioncomponent_parent_solutioncomponent", Microsoft.Xrm.Sdk.EntityRole.Referencing)]
    public sdk_wrapper.Entities.SolutionComponent Referencingsolutioncomponent_parent_solutioncomponent
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.GetRelatedEntity<sdk_wrapper.Entities.SolutionComponent>("solutioncomponent_parent_solutioncomponent", Microsoft.Xrm.Sdk.EntityRole.Referencing);
      }
    }

    /// <summary>
    /// Constructor for populating via LINQ queries given a LINQ anonymous type
    /// <param name="anonymousType">LINQ anonymous type.</param>
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCode()]
    public SolutionComponent(object anonymousType) :
        this()
    {
      foreach (var p in anonymousType.GetType().GetProperties())
      {
        var value = p.GetValue(anonymousType, null);
        var name = p.Name.ToLower();

        if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
        {
          value = new Microsoft.Xrm.Sdk.OptionSetValue((int)value);
          name = name.Remove(name.Length - "enum".Length);
        }

        switch (name)
        {
          case "id":
            base.Id = (System.Guid)value;
            Attributes["solutioncomponentid"] = base.Id;
            break;
          case "solutioncomponentid":
            var id = (System.Nullable<System.Guid>)value;
            if (id == null) { continue; }
            base.Id = id.Value;
            Attributes[name] = base.Id;
            break;
          case "formattedvalues":
            // Add Support for FormattedValues
            FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
            break;
          default:
            Attributes[name] = value;
            break;
        }
      }
    }
  }

  /// <summary>
  /// Represents a source of entities bound to a CRM service. It tracks and manages changes made to the retrieved entities.
  /// </summary>
  public partial class CrmServiceContext : Microsoft.Xrm.Sdk.Client.OrganizationServiceContext
  {

    /// <summary>
    /// Constructor.
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCode()]
    public CrmServiceContext(Microsoft.Xrm.Sdk.IOrganizationService service) :
        base(service)
    {
    }

    /// <summary>
    /// Gets a binding to the set of all <see cref="sdk_wrapper.Entities.PluginAssembly"/> entities.
    /// </summary>
    public System.Linq.IQueryable<sdk_wrapper.Entities.PluginAssembly> PluginAssemblySet
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.CreateQuery<sdk_wrapper.Entities.PluginAssembly>();
      }
    }

    /// <summary>
    /// Gets a binding to the set of all <see cref="sdk_wrapper.Entities.PluginType"/> entities.
    /// </summary>
    public System.Linq.IQueryable<sdk_wrapper.Entities.PluginType> PluginTypeSet
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.CreateQuery<sdk_wrapper.Entities.PluginType>();
      }
    }

    /// <summary>
    /// Gets a binding to the set of all <see cref="sdk_wrapper.Entities.SolutionComponent"/> entities.
    /// </summary>
    public System.Linq.IQueryable<sdk_wrapper.Entities.SolutionComponent> SolutionComponentSet
    {
      [System.Diagnostics.DebuggerNonUserCode()]
      get
      {
        return this.CreateQuery<sdk_wrapper.Entities.SolutionComponent>();
      }
    }
  }

  internal sealed class EntityOptionSetEnum
  {

    [System.Diagnostics.DebuggerNonUserCode()]
    public static System.Nullable<int> GetEnum(Microsoft.Xrm.Sdk.Entity entity, string attributeLogicalName)
    {
      if (entity.Attributes.ContainsKey(attributeLogicalName))
      {
        Microsoft.Xrm.Sdk.OptionSetValue value = entity.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(attributeLogicalName);
        if (value != null)
        {
          return value.Value;
        }
      }
      return null;
    }
  }

  /// <summary>
  /// Attribute to handle storing the OptionSet's Metadata.
  /// </summary>
  [System.AttributeUsageAttribute(System.AttributeTargets.Field)]
  public sealed class OptionSetMetadataAttribute : System.Attribute
  {

    /// <summary>
    /// Color of the OptionSetValue.
    /// </summary>
    public string Color { get; set; }

    /// <summary>
    /// Description of the OptionSetValue.
    /// </summary>
    public string Description { get; set; }

    /// <summary>
    /// Display order index of the OptionSetValue.
    /// </summary>
    public int DisplayIndex { get; set; }

    /// <summary>
    /// External value of the OptionSetValue.
    /// </summary>
    public string ExternalValue { get; set; }

    /// <summary>
    /// Name of the OptionSetValue.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// Initializes a new instance of the <see cref="OptionSetMetadataAttribute"/> class.
    /// </summary>
    /// <param name="name">Name of the value.</param>
    /// <param name="displayIndex">Display order index of the value.</param>
    /// <param name="color">Color of the value.</param>
    /// <param name="description">Description of the value.</param>
    /// <param name="externalValue">External value of the value.</param>
    [System.Diagnostics.DebuggerNonUserCode()]
    public OptionSetMetadataAttribute(string name, int displayIndex, string color = null, string description = null, string externalValue = null)
    {
      this.Color = color;
      this.Description = description;
      this.ExternalValue = externalValue;
      this.DisplayIndex = displayIndex;
      this.Name = name;
    }
  }

  /// <summary>
  /// Extension class to handle retrieving of OptionSetMetadataAttribute.
  /// </summary>
  public static class OptionSetExtension
  {

    /// <summary>
    /// Returns the OptionSetMetadataAttribute for the given enum value
    /// </summary>
    /// <typeparam name="T">OptionSet Enum Type</typeparam>
    /// <param name="value">Enum Value with OptionSetMetadataAttribute</param>
    [System.Diagnostics.DebuggerNonUserCode()]
    public static OptionSetMetadataAttribute GetMetadata<T>(this T value)
      where T : struct, System.IConvertible
    {
      System.Type enumType = typeof(T);
      if (!enumType.IsEnum)
      {
        throw new System.ArgumentException("T must be an enum!");
      }
      System.Reflection.MemberInfo[] members = enumType.GetMember(value.ToString());
      for (int i = 0; (i < members.Length); i++
      )
      {
        System.Attribute attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(members[i], typeof(OptionSetMetadataAttribute));
        if (attribute != null)
        {
          return ((OptionSetMetadataAttribute)(attribute));
        }
      }
      throw new System.ArgumentException("T must be an enum adorned with an OptionSetMetadataAttribute!");
    }
  }
}
